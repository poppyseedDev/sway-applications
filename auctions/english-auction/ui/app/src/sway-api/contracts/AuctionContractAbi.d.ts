/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.73.0
  Forc version: 0.49.2
  Fuel-Core version: 0.22.0
*/

import type {
  BigNumberish,
  BN,
  BytesLike,
  Contract,
  DecodedValue,
  FunctionFragment,
  Interface,
  InvokeFunction,
} from 'fuels';

import type { Option, Enum } from "./common";

export enum AccessErrorInput { AuctionIsNotClosed = 'AuctionIsNotClosed', AuctionIsNotOpen = 'AuctionIsNotOpen', SenderIsNotSeller = 'SenderIsNotSeller' };
export enum AccessErrorOutput { AuctionIsNotClosed = 'AuctionIsNotClosed', AuctionIsNotOpen = 'AuctionIsNotOpen', SenderIsNotSeller = 'SenderIsNotSeller' };
export type IdentityInput = Enum<{ Address: AddressInput, ContractId: ContractIdInput }>;
export type IdentityOutput = Enum<{ Address: AddressOutput, ContractId: ContractIdOutput }>;
export enum InitErrorInput { AuctionDurationNotProvided = 'AuctionDurationNotProvided', InitialPriceCannotBeZero = 'InitialPriceCannotBeZero', ReserveLessThanInitialPrice = 'ReserveLessThanInitialPrice' };
export enum InitErrorOutput { AuctionDurationNotProvided = 'AuctionDurationNotProvided', InitialPriceCannotBeZero = 'InitialPriceCannotBeZero', ReserveLessThanInitialPrice = 'ReserveLessThanInitialPrice' };
export enum InputErrorInput { AuctionDoesNotExist = 'AuctionDoesNotExist', InitialPriceNotMet = 'InitialPriceNotMet', IncorrectAmountProvided = 'IncorrectAmountProvided', IncorrectAssetProvided = 'IncorrectAssetProvided' };
export enum InputErrorOutput { AuctionDoesNotExist = 'AuctionDoesNotExist', InitialPriceNotMet = 'InitialPriceNotMet', IncorrectAmountProvided = 'IncorrectAmountProvided', IncorrectAssetProvided = 'IncorrectAssetProvided' };
export enum StateInput { Closed = 'Closed', Open = 'Open' };
export enum StateOutput { Closed = 'Closed', Open = 'Open' };
export enum UserErrorInput { BidderIsSeller = 'BidderIsSeller', UserHasAlreadyWithdrawn = 'UserHasAlreadyWithdrawn' };
export enum UserErrorOutput { BidderIsSeller = 'BidderIsSeller', UserHasAlreadyWithdrawn = 'UserHasAlreadyWithdrawn' };

export type AddressInput = { value: string };
export type AddressOutput = AddressInput;
export type AssetIdInput = { value: string };
export type AssetIdOutput = AssetIdInput;
export type AuctionInput = { bid_asset: AssetIdInput, end_block: BigNumberish, highest_bid: BigNumberish, highest_bidder: Option<IdentityInput>, initial_price: BigNumberish, reserve_price: Option<BigNumberish>, sell_asset: AssetIdInput, sell_asset_amount: BigNumberish, seller: IdentityInput, state: StateInput };
export type AuctionOutput = { bid_asset: AssetIdOutput, end_block: number, highest_bid: BN, highest_bidder: Option<IdentityOutput>, initial_price: BN, reserve_price: Option<BN>, sell_asset: AssetIdOutput, sell_asset_amount: BN, seller: IdentityOutput, state: StateOutput };
export type BidEventInput = { amount: BigNumberish, auction_id: BigNumberish, user: IdentityInput };
export type BidEventOutput = { amount: BN, auction_id: BN, user: IdentityOutput };
export type CancelAuctionEventInput = { auction_id: BigNumberish };
export type CancelAuctionEventOutput = { auction_id: BN };
export type ContractIdInput = { value: string };
export type ContractIdOutput = ContractIdInput;
export type CreateAuctionEventInput = { auction_id: BigNumberish, bid_asset: AssetIdInput, sell_asset: AssetIdInput, sell_asset_amount: BigNumberish };
export type CreateAuctionEventOutput = { auction_id: BN, bid_asset: AssetIdOutput, sell_asset: AssetIdOutput, sell_asset_amount: BN };
export type WithdrawEventInput = { asset: AssetIdInput, asset_amount: BigNumberish, auction_id: BigNumberish, user: IdentityInput };
export type WithdrawEventOutput = { asset: AssetIdOutput, asset_amount: BN, auction_id: BN, user: IdentityOutput };

interface AuctionContractAbiInterface extends Interface {
  functions: {
    bid: FunctionFragment;
    cancel: FunctionFragment;
    create: FunctionFragment;
    withdraw: FunctionFragment;
    auction_info: FunctionFragment;
    deposit_balance: FunctionFragment;
    total_auctions: FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'bid', values: [BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'cancel', values: [BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'create', values: [AssetIdInput, BigNumberish, BigNumberish, Option<BigNumberish>, IdentityInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'withdraw', values: [BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'auction_info', values: [BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'deposit_balance', values: [BigNumberish, IdentityInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'total_auctions', values: []): Uint8Array;

  decodeFunctionData(functionFragment: 'bid', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'cancel', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'create', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'withdraw', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'auction_info', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'deposit_balance', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'total_auctions', data: BytesLike): DecodedValue;
}

export class AuctionContractAbi extends Contract {
  interface: AuctionContractAbiInterface;
  functions: {
    bid: InvokeFunction<[auction_id: BigNumberish], void>;
    cancel: InvokeFunction<[auction_id: BigNumberish], void>;
    create: InvokeFunction<[bid_asset: AssetIdInput, duration: BigNumberish, initial_price: BigNumberish, reserve_price: Option<BigNumberish>, seller: IdentityInput], BN>;
    withdraw: InvokeFunction<[auction_id: BigNumberish], void>;
    auction_info: InvokeFunction<[auction_id: BigNumberish], Option<AuctionOutput>>;
    deposit_balance: InvokeFunction<[auction_id: BigNumberish, identity: IdentityInput], Option<BN>>;
    total_auctions: InvokeFunction<[], BN>;
  };
}
